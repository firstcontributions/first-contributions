name: PR File Check Bot

on:
  pull_request:
    types: [opened, synchronize]
    paths:    # ✅ Correct indentation and no invalid quote
      - "Contributors.md"

jobs:
  check-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3

      - name: Get list of changed files
        id: changed-files
        run: |
          echo "::group::Changed Files"
          git fetch origin main
          git diff --name-only origin/main...HEAD > files.txt
          cat files.txt
          echo "::endgroup::"
          echo "files=$(cat files.txt | paste -sd ',' -)" >> $GITHUB_OUTPUT

      - name: Comment on PR if needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const files = "${{ steps.changed-files.outputs.files }}".split(",");
            const allowed = ["Contributors.md", "README.md", "docs/", "translations/"];
            const invalid = files.filter(f => !allowed.some(a => f.startsWith(a)));
            const issue_number = context.payload.pull_request.number;

            if (invalid.length > 0) {
              const msg = `
👋 Hi @${context.payload.pull_request.user.login}, thanks for your pull request!

However, it looks like your PR includes some files that are *not typically allowed* for beginner contributions:

\`\`\`
${invalid.join("\n")}
\`\`\`

✅ Please ensure you're only modifying files like:
- \`Contributors.md\`
- \`README.md\`
- Files in \`docs/\` or \`translations/\`

Let us know if you intended these changes. Thanks for contributing! 💜
              `;
              await github.rest.issues.createComment({
                issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: msg
              });
            } else {
              const thanks = `
🎉 Thanks @${context.payload.pull_request.user.login} for following our contribution guidelines! Everything looks good. 👍
              `;
              await github.rest.issues.createComment({
                issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: thanks
              });
            }
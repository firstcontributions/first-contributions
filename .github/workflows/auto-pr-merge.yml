name: Auto-merge PRs

on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - "Contributors.md" # Only run if only Contributors.md file changed

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Check if PR only modifies Contributors.md
        id: is_only_contributors_file_changed
        run: |
          # Get a list of files changed in the pull request
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          FILES_CHANGED=$(echo $PR_FILES | tr '\n' ' ')

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_ENV

          if [[ "${FILES_CHANGED// /}" == "Contributors.md" ]]; then
            echo "only_contributors=true" >> $GITHUB_ENV
          else
            echo "only_contributors=false" >> $GITHUB_ENV
          fi

      - name: Check if PR has only one line change
        run: |
          ADDITIONS=${{ github.event.pull_request.additions }}
          DELETIONS=${{ github.event.pull_request.deletions }}

          echo "additions=$ADDITIONS" >> $GITHUB_ENV
          echo "deletions=$DELETIONS" >> $GITHUB_ENV

          if [[ $ADDITIONS == 1 && $DELETIONS == 0 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          elif [[ $ADDITIONS == 2 && $DELETIONS == 1 ]]; then
            echo "one_line_change=true" >> $GITHUB_ENV
          else
            echo "one_line_change=false" >> $GITHUB_ENV
          fi

      # Merge the pull request if it only modifies the Contributors.md file and has only one line change
      - name: Merge PR
        id: merge_pr
        if: env.only_contributors == 'true' && env.one_line_change == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: "squash"
              });

              if (response.status === 200) {
                const celebrationGifs = [
                  'https://c.tenor.com/ZCq4SwgCfxAAAAAC/snoopy-peanuts.gif',
                  'https://c.tenor.com/Z0ojZS2kpO0AAAAC/milk-and-mocha-happy.gif',
                  'https://c.tenor.com/LffD4a8ET9AAAAAC/heart-celebrate.gif',
                  'https://c.tenor.com/HJ0iSKwIG28AAAAC/yes-baby.gif',
                  'https://c.tenor.com/4blWuIh5MIYAAAAC/baby-yoda.gif',
                  'https://c.tenor.com/B_zYdea4l-4AAAAC/yay-minions.gif',
                  'https://media1.giphy.com/media/artj92V8o75VPL7AeQ/giphy.gif',
                  'https://media2.giphy.com/media/IwAZ6dvvvaTtdI8SD5/giphy.gif',
                  'https://media0.giphy.com/media/z8gtBVdZVrH20/giphy.gif',
                  'https://media2.giphy.com/media/26gN16cJ6gy4LzZSw/giphy.gif',
                  'https://media1.giphy.com/media/LZElUsjl1Bu6c/giphy.gif',
                  'https://media1.giphy.com/media/gHnwTttExPf4nwOWm7/giphy.gif',
                ];

                const getRandomGif = () => celebrationGifs[Math.floor(Math.random() * celebrationGifs.length)];

                const message = `ðŸŽ‰ Congratulations! Your PR has been merged! ${getRandomGif()}`;
                
                // Post a comment on the PR
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: "Something went wrong while attempting to merge this pull request. Please check the GitHub Actions log for more information."
                });
              }
            } catch (error) {
              let errMsg = "An error occurred while merging the pull request.";
              if (error.status === 405) {
                errMsg = `Hello @${context.payload.pull_request.user.login}, there is a merge conflict with the target branch. Please resolve the conflicts and try again.`;
              } else if (error.status === 409) {
                errMsg = "The pull request has conflicts with the target branch. Resolve the conflicts before merging.";
              }
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errMsg
              });
              core.setFailed(error.message);
            }

      # Post a comment on the pull request if it was not merged automatically
      - name: Post comment on PR if not merged automatically
        if: env.only_contributors != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            });

            const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]');
            const body = `Thank you for your pull request. This pull request contains changes in files which require review. The following files were changed:\n\n${process.env.files_changed.trim() ? `\n\n${process.env.files_changed.trim().split(' ').map(file => `- ${file}`).join('\n')}` : ''}`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
